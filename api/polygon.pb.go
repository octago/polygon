// Code generated by protoc-gen-go. DO NOT EDIT.
// source: polygon.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	polygon.proto

It has these top-level messages:
	CreateRequest
	CreateReply
	Stand
	GetRequest
	GetReply
	StreamChunk
	CancelRequest
	CancelReply
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest struct {
	TemplateId string `protobuf:"bytes,1,opt,name=template_id,json=templateId" json:"template_id,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetTemplateId() string {
	if m != nil {
		return m.TemplateId
	}
	return ""
}

type CreateReply struct {
	Stand *Stand `protobuf:"bytes,1,opt,name=stand" json:"stand,omitempty"`
}

func (m *CreateReply) Reset()                    { *m = CreateReply{} }
func (m *CreateReply) String() string            { return proto.CompactTextString(m) }
func (*CreateReply) ProtoMessage()               {}
func (*CreateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateReply) GetStand() *Stand {
	if m != nil {
		return m.Stand
	}
	return nil
}

type Stand struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Stand) Reset()                    { *m = Stand{} }
func (m *Stand) String() string            { return proto.CompactTextString(m) }
func (*Stand) ProtoMessage()               {}
func (*Stand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Stand) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetRequest struct {
	StandId string `protobuf:"bytes,1,opt,name=stand_id,json=standId" json:"stand_id,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetRequest) GetStandId() string {
	if m != nil {
		return m.StandId
	}
	return ""
}

type GetReply struct {
	Stand *Stand `protobuf:"bytes,1,opt,name=stand" json:"stand,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetReply) GetStand() *Stand {
	if m != nil {
		return m.Stand
	}
	return nil
}

type StreamChunk struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *StreamChunk) Reset()                    { *m = StreamChunk{} }
func (m *StreamChunk) String() string            { return proto.CompactTextString(m) }
func (*StreamChunk) ProtoMessage()               {}
func (*StreamChunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StreamChunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type CancelRequest struct {
	StandId string `protobuf:"bytes,1,opt,name=stand_id,json=standId" json:"stand_id,omitempty"`
}

func (m *CancelRequest) Reset()                    { *m = CancelRequest{} }
func (m *CancelRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelRequest) ProtoMessage()               {}
func (*CancelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CancelRequest) GetStandId() string {
	if m != nil {
		return m.StandId
	}
	return ""
}

type CancelReply struct {
}

func (m *CancelReply) Reset()                    { *m = CancelReply{} }
func (m *CancelReply) String() string            { return proto.CompactTextString(m) }
func (*CancelReply) ProtoMessage()               {}
func (*CancelReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*CreateRequest)(nil), "api.CreateRequest")
	proto.RegisterType((*CreateReply)(nil), "api.CreateReply")
	proto.RegisterType((*Stand)(nil), "api.Stand")
	proto.RegisterType((*GetRequest)(nil), "api.GetRequest")
	proto.RegisterType((*GetReply)(nil), "api.GetReply")
	proto.RegisterType((*StreamChunk)(nil), "api.StreamChunk")
	proto.RegisterType((*CancelRequest)(nil), "api.CancelRequest")
	proto.RegisterType((*CancelReply)(nil), "api.CancelReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PolygonServer service

type PolygonServerClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	Attach(ctx context.Context, opts ...grpc.CallOption) (PolygonServer_AttachClient, error)
	CancelStand(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelReply, error)
}

type polygonServerClient struct {
	cc *grpc.ClientConn
}

func NewPolygonServerClient(cc *grpc.ClientConn) PolygonServerClient {
	return &polygonServerClient{cc}
}

func (c *polygonServerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := grpc.Invoke(ctx, "/api.PolygonServer/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonServerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/api.PolygonServer/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonServerClient) Attach(ctx context.Context, opts ...grpc.CallOption) (PolygonServer_AttachClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PolygonServer_serviceDesc.Streams[0], c.cc, "/api.PolygonServer/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &polygonServerAttachClient{stream}
	return x, nil
}

type PolygonServer_AttachClient interface {
	Send(*StreamChunk) error
	Recv() (*StreamChunk, error)
	grpc.ClientStream
}

type polygonServerAttachClient struct {
	grpc.ClientStream
}

func (x *polygonServerAttachClient) Send(m *StreamChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *polygonServerAttachClient) Recv() (*StreamChunk, error) {
	m := new(StreamChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *polygonServerClient) CancelStand(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelReply, error) {
	out := new(CancelReply)
	err := grpc.Invoke(ctx, "/api.PolygonServer/CancelStand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PolygonServer service

type PolygonServerServer interface {
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Get(context.Context, *GetRequest) (*GetReply, error)
	Attach(PolygonServer_AttachServer) error
	CancelStand(context.Context, *CancelRequest) (*CancelReply, error)
}

func RegisterPolygonServerServer(s *grpc.Server, srv PolygonServerServer) {
	s.RegisterService(&_PolygonServer_serviceDesc, srv)
}

func _PolygonServer_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonServerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PolygonServer/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonServerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolygonServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PolygonServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonServerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolygonServer_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PolygonServerServer).Attach(&polygonServerAttachServer{stream})
}

type PolygonServer_AttachServer interface {
	Send(*StreamChunk) error
	Recv() (*StreamChunk, error)
	grpc.ServerStream
}

type polygonServerAttachServer struct {
	grpc.ServerStream
}

func (x *polygonServerAttachServer) Send(m *StreamChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *polygonServerAttachServer) Recv() (*StreamChunk, error) {
	m := new(StreamChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PolygonServer_CancelStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonServerServer).CancelStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.PolygonServer/CancelStand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonServerServer).CancelStand(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolygonServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.PolygonServer",
	HandlerType: (*PolygonServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PolygonServer_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PolygonServer_Get_Handler,
		},
		{
			MethodName: "CancelStand",
			Handler:    _PolygonServer_CancelStand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Attach",
			Handler:       _PolygonServer_Attach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "polygon.proto",
}

func init() { proto.RegisterFile("polygon.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0xa6, 0x10, 0x10, 0xa7, 0xae, 0x92, 0x89, 0x89, 0xca, 0x45, 0xb2, 0x1e, 0x20, 0xc6, 0xd4,
	0xa6, 0xc6, 0x07, 0x30, 0x3d, 0x10, 0x6e, 0xa6, 0x7d, 0x00, 0xb3, 0xb6, 0x13, 0x69, 0x5c, 0xda,
	0xb5, 0x2c, 0x26, 0x7d, 0x50, 0xdf, 0xc7, 0xb0, 0xcb, 0x52, 0x89, 0x17, 0x6e, 0x9d, 0x6f, 0xbe,
	0xe9, 0xf7, 0x93, 0x05, 0xa6, 0x2a, 0xd9, 0x7c, 0x54, 0x65, 0xa0, 0xea, 0x4a, 0x57, 0xd8, 0x13,
	0xaa, 0xe0, 0x21, 0xb0, 0xb8, 0x26, 0xa1, 0x29, 0xa1, 0xaf, 0x0d, 0xad, 0x35, 0xde, 0x82, 0xaf,
	0x69, 0xa5, 0xa4, 0xd0, 0xf4, 0x56, 0xe4, 0xd7, 0xde, 0xc4, 0x9b, 0x9d, 0x26, 0xe0, 0xa0, 0x45,
	0xce, 0x1f, 0xc1, 0x77, 0x17, 0x4a, 0x36, 0x38, 0x81, 0xfe, 0x5a, 0x8b, 0xd2, 0x32, 0xfd, 0x08,
	0x02, 0xa1, 0x8a, 0x20, 0xdd, 0x22, 0x89, 0x5d, 0xf0, 0x2b, 0xe8, 0x9b, 0x19, 0xcf, 0xa1, 0xbb,
	0xff, 0x63, 0xb7, 0xc8, 0xf9, 0x14, 0x60, 0x4e, 0xda, 0x09, 0xdf, 0xc0, 0xd0, 0xf0, 0x5b, 0xd5,
	0x13, 0x33, 0x2f, 0x72, 0xfe, 0x00, 0x43, 0x43, 0x3c, 0x4e, 0xef, 0x0e, 0xfc, 0x54, 0xd7, 0x24,
	0x56, 0xf1, 0x72, 0x53, 0x7e, 0xe2, 0x25, 0xf4, 0xb3, 0xed, 0x87, 0x39, 0x38, 0x4b, 0xec, 0xc0,
	0xef, 0x81, 0xc5, 0xa2, 0xcc, 0x48, 0x1e, 0x21, 0xcf, 0xc0, 0x77, 0x5c, 0x25, 0x9b, 0xe8, 0xc7,
	0x03, 0xf6, 0x6a, 0x9b, 0x4c, 0xa9, 0xfe, 0xa6, 0x1a, 0x43, 0x18, 0xd8, 0x4a, 0x10, 0x8d, 0x9d,
	0x83, 0x46, 0xc7, 0xa3, 0x03, 0x4c, 0xc9, 0x86, 0x77, 0x70, 0x0a, 0xbd, 0x39, 0x69, 0xbc, 0x30,
	0xab, 0xb6, 0x84, 0x31, 0x6b, 0x01, 0x4b, 0x8c, 0x60, 0xf0, 0xa2, 0xb5, 0xc8, 0x96, 0x38, 0xda,
	0x25, 0xdd, 0x27, 0x1b, 0xff, 0x43, 0x78, 0x67, 0xe6, 0x85, 0x1e, 0x3e, 0x3b, 0xbf, 0xb6, 0xf6,
	0x9d, 0xa7, 0xbf, 0x69, 0x9d, 0xa7, 0x36, 0x15, 0xef, 0xbc, 0x0f, 0xcc, 0xb3, 0x78, 0xfa, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0xe5, 0x5c, 0xaf, 0x05, 0x27, 0x02, 0x00, 0x00,
}
